// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v6.31.1
// source: proto/grpc.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LogStreamServiceClient is the client API for LogStreamService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LogStreamServiceClient interface {
	UploadLogs(ctx context.Context, opts ...grpc.CallOption) (LogStreamService_UploadLogsClient, error)
}

type logStreamServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLogStreamServiceClient(cc grpc.ClientConnInterface) LogStreamServiceClient {
	return &logStreamServiceClient{cc}
}

func (c *logStreamServiceClient) UploadLogs(ctx context.Context, opts ...grpc.CallOption) (LogStreamService_UploadLogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &LogStreamService_ServiceDesc.Streams[0], "/grpc.LogStreamService/UploadLogs", opts...)
	if err != nil {
		return nil, err
	}
	x := &logStreamServiceUploadLogsClient{stream}
	return x, nil
}

type LogStreamService_UploadLogsClient interface {
	Send(*LogMessage) error
	CloseAndRecv() (*UploadLogsResponse, error)
	grpc.ClientStream
}

type logStreamServiceUploadLogsClient struct {
	grpc.ClientStream
}

func (x *logStreamServiceUploadLogsClient) Send(m *LogMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *logStreamServiceUploadLogsClient) CloseAndRecv() (*UploadLogsResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadLogsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LogStreamServiceServer is the server API for LogStreamService service.
// All implementations must embed UnimplementedLogStreamServiceServer
// for forward compatibility
type LogStreamServiceServer interface {
	UploadLogs(LogStreamService_UploadLogsServer) error
	mustEmbedUnimplementedLogStreamServiceServer()
}

// UnimplementedLogStreamServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLogStreamServiceServer struct {
}

func (UnimplementedLogStreamServiceServer) UploadLogs(LogStreamService_UploadLogsServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadLogs not implemented")
}
func (UnimplementedLogStreamServiceServer) mustEmbedUnimplementedLogStreamServiceServer() {}

// UnsafeLogStreamServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogStreamServiceServer will
// result in compilation errors.
type UnsafeLogStreamServiceServer interface {
	mustEmbedUnimplementedLogStreamServiceServer()
}

func RegisterLogStreamServiceServer(s grpc.ServiceRegistrar, srv LogStreamServiceServer) {
	s.RegisterService(&LogStreamService_ServiceDesc, srv)
}

func _LogStreamService_UploadLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LogStreamServiceServer).UploadLogs(&logStreamServiceUploadLogsServer{stream})
}

type LogStreamService_UploadLogsServer interface {
	SendAndClose(*UploadLogsResponse) error
	Recv() (*LogMessage, error)
	grpc.ServerStream
}

type logStreamServiceUploadLogsServer struct {
	grpc.ServerStream
}

func (x *logStreamServiceUploadLogsServer) SendAndClose(m *UploadLogsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *logStreamServiceUploadLogsServer) Recv() (*LogMessage, error) {
	m := new(LogMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LogStreamService_ServiceDesc is the grpc.ServiceDesc for LogStreamService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LogStreamService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.LogStreamService",
	HandlerType: (*LogStreamServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadLogs",
			Handler:       _LogStreamService_UploadLogs_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/grpc.proto",
}

// CommandServiceClient is the client API for CommandService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommandServiceClient interface {
	GetCommand(ctx context.Context, in *PingCommand, opts ...grpc.CallOption) (*Command, error)
}

type commandServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCommandServiceClient(cc grpc.ClientConnInterface) CommandServiceClient {
	return &commandServiceClient{cc}
}

func (c *commandServiceClient) GetCommand(ctx context.Context, in *PingCommand, opts ...grpc.CallOption) (*Command, error) {
	out := new(Command)
	err := c.cc.Invoke(ctx, "/grpc.CommandService/GetCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommandServiceServer is the server API for CommandService service.
// All implementations must embed UnimplementedCommandServiceServer
// for forward compatibility
type CommandServiceServer interface {
	GetCommand(context.Context, *PingCommand) (*Command, error)
	mustEmbedUnimplementedCommandServiceServer()
}

// UnimplementedCommandServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCommandServiceServer struct {
}

func (UnimplementedCommandServiceServer) GetCommand(context.Context, *PingCommand) (*Command, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommand not implemented")
}
func (UnimplementedCommandServiceServer) mustEmbedUnimplementedCommandServiceServer() {}

// UnsafeCommandServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommandServiceServer will
// result in compilation errors.
type UnsafeCommandServiceServer interface {
	mustEmbedUnimplementedCommandServiceServer()
}

func RegisterCommandServiceServer(s grpc.ServiceRegistrar, srv CommandServiceServer) {
	s.RegisterService(&CommandService_ServiceDesc, srv)
}

func _CommandService_GetCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingCommand)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommandServiceServer).GetCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.CommandService/GetCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommandServiceServer).GetCommand(ctx, req.(*PingCommand))
	}
	return interceptor(ctx, in, info, handler)
}

// CommandService_ServiceDesc is the grpc.ServiceDesc for CommandService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommandService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.CommandService",
	HandlerType: (*CommandServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCommand",
			Handler:    _CommandService_GetCommand_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/grpc.proto",
}

// TransportServiceClient is the client API for TransportService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransportServiceClient interface {
	Upload(ctx context.Context, opts ...grpc.CallOption) (TransportService_UploadClient, error)
}

type transportServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTransportServiceClient(cc grpc.ClientConnInterface) TransportServiceClient {
	return &transportServiceClient{cc}
}

func (c *transportServiceClient) Upload(ctx context.Context, opts ...grpc.CallOption) (TransportService_UploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &TransportService_ServiceDesc.Streams[0], "/grpc.TransportService/Upload", opts...)
	if err != nil {
		return nil, err
	}
	x := &transportServiceUploadClient{stream}
	return x, nil
}

type TransportService_UploadClient interface {
	Send(*CMDLine) error
	Recv() (*CMDCommand, error)
	grpc.ClientStream
}

type transportServiceUploadClient struct {
	grpc.ClientStream
}

func (x *transportServiceUploadClient) Send(m *CMDLine) error {
	return x.ClientStream.SendMsg(m)
}

func (x *transportServiceUploadClient) Recv() (*CMDCommand, error) {
	m := new(CMDCommand)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TransportServiceServer is the server API for TransportService service.
// All implementations must embed UnimplementedTransportServiceServer
// for forward compatibility
type TransportServiceServer interface {
	Upload(TransportService_UploadServer) error
	mustEmbedUnimplementedTransportServiceServer()
}

// UnimplementedTransportServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTransportServiceServer struct {
}

func (UnimplementedTransportServiceServer) Upload(TransportService_UploadServer) error {
	return status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (UnimplementedTransportServiceServer) mustEmbedUnimplementedTransportServiceServer() {}

// UnsafeTransportServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransportServiceServer will
// result in compilation errors.
type UnsafeTransportServiceServer interface {
	mustEmbedUnimplementedTransportServiceServer()
}

func RegisterTransportServiceServer(s grpc.ServiceRegistrar, srv TransportServiceServer) {
	s.RegisterService(&TransportService_ServiceDesc, srv)
}

func _TransportService_Upload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TransportServiceServer).Upload(&transportServiceUploadServer{stream})
}

type TransportService_UploadServer interface {
	Send(*CMDCommand) error
	Recv() (*CMDLine, error)
	grpc.ServerStream
}

type transportServiceUploadServer struct {
	grpc.ServerStream
}

func (x *transportServiceUploadServer) Send(m *CMDCommand) error {
	return x.ServerStream.SendMsg(m)
}

func (x *transportServiceUploadServer) Recv() (*CMDLine, error) {
	m := new(CMDLine)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TransportService_ServiceDesc is the grpc.ServiceDesc for TransportService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransportService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.TransportService",
	HandlerType: (*TransportServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Upload",
			Handler:       _TransportService_Upload_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/grpc.proto",
}
